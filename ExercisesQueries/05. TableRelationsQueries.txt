--------------------------------------------------------------------
01. One-To-One Relationship
--------------------------------------------------------------------
CREATE TABLE Passports
(
	PassportID INT PRIMARY KEY,
	PassportNumber varchar(10)
)

CREATE TABLE Persons
(
	PersonID INT PRIMARY KEY,
	FirstName varchar(50),
	Salary FLOAT,
	PassportID INT UNIQUE,
	CONSTRAINT FK_Persons_Passports FOREIGN KEY(PassportID)
	REFERENCES Passports(PassportID)
)


INSERT INTO Passports(PassportID, PassportNumber)
VALUES (101, 'N34FG21B'), (102, 'K65LO4R7'), (103, 'ZE657QP2')

INSERT INTO Persons(PersonID, FirstName,Salary, PassportID)
VALUES (1, 'Roberto', 433000.00, 102), (2, 'Tom', 56100.00, 103), (3, 'Yana', 60200.00, 101)
--------------------------------------------------------------------
02. One-To-Many/Many-To-One Relationship
--------------------------------------------------------------------
CREATE TABLE Manufacturers
(
	[ManufacturerID] INT PRIMARY KEY,
	[Name] varchar(25),
	[EstablishedOn] DATETIME
)

CREATE TABLE Models
(
	[ModelID] INT PRIMARY KEY,
	[Name] varchar(25),
	[ManufacturerID] INT,
	CONSTRAINT FK_Models_Manufacturers FOREIGN KEY(ManufacturerID)
	REFERENCES Manufacturers(ManufacturerID)
)
--------------------------------------------------------------------
03. Many-To-Many Relationship
--------------------------------------------------------------------
CREATE TABLE Students
(
	[StudentID] INT PRIMARY KEY,
	[Name] VARCHAR(50)
)

CREATE TABLE Exams
(
	[ExamID] INT PRIMARY KEY,
	[Name] VARCHAR(50)
)

CREATE TABLE StudentsExams
(
	[StudentID] INT,
	[ExamID] INT,
	CONSTRAINT PK_StudentsExams PRIMARY KEY(StudentID, ExamID),
	CONSTRAINT FK_StudentsExams_Students FOREIGN KEY(StudentID)
	REFERENCES Students(StudentID),
	CONSTRAINT FK_StudentsExams_Exams FOREIGN KEY(ExamID)
	REFERENCES Exams(ExamID),
)
--------------------------------------------------------------------
04. Self-Referencing
--------------------------------------------------------------------
CREATE TABLE Teachers
(
	[TeacherID] INT PRIMARY KEY,
	[Name] VARCHAR(50),
	[ManagerID] INT,
	CONSTRAINT FK_Teachers_TeacherID FOREIGN KEY(ManagerID)
    REFERENCES Teachers(TeacherID)
)
--------------------------------------------------------------------
05. Online Store Database
--------------------------------------------------------------------
CREATE TABLE Cities
(
	[CityID] INT PRIMARY KEY,
	[Name] VARCHAR(50)
)

CREATE TABLE Customers
(
	[CustomerID] INT PRIMARY KEY,
	[Name] VARCHAR(50),
	[Birthday] DATE,
	[CityID] INT,
	CONSTRAINT FK_Customers_Cities FOREIGN KEY(CityID)
	REFERENCES Cities(CityID),
)

CREATE TABLE Orders
(
	[OrderID] INT PRIMARY KEY,
	[CustomerID] INT,
	CONSTRAINT FK_Orders_Customers FOREIGN KEY(CustomerID)
	REFERENCES Customers(CustomerID)
)

CREATE TABLE ItemTypes
(
	[ItemTypeID] INT PRIMARY KEY,
	[Name] VARCHAR(50),
)

CREATE TABLE Items
(
	[ItemID] INT PRIMARY KEY,
	[Name] VARCHAR(50),
	[ItemTypeID] INT,
	CONSTRAINT FK_Items_ItemTypes FOREIGN KEY(ItemTypeID)
	REFERENCES ItemTypes(ItemTypeID)
)

CREATE TABLE OrderItems
(
	[OrderID] INT,
	[ItemID] INT,
	CONSTRAINT PK_OrderID_ItemID PRIMARY KEY (OrderID, ItemID),
	CONSTRAINT FK_OrderItems_Orders FOREIGN KEY (OrderID)
	REFERENCES Orders(OrderID),
	CONSTRAINT FK_OrderItems_Items FOREIGN KEY (ItemID)
	REFERENCES Items(ItemID)
)
--------------------------------------------------------------------
06. University Database
--------------------------------------------------------------------
CREATE TABLE Majors
(
	[MajorID] INT PRIMARY KEY,
	[Name] VARCHAR(50)
)

CREATE TABLE Subjects
(
	[SubjectID] INT PRIMARY KEY,
	[SubjectName] VARCHAR(50)
)

CREATE TABLE Students
(
	[StudentID] INT PRIMARY KEY,
	[StudentNumber] VARCHAR(50),
	[StudentName] VARCHAR(25),
	[MajorID] INT,
	CONSTRAINT FK_Students_Majors FOREIGN KEY(MajorID)
	REFERENCES Majors(MajorID)
)

CREATE TABLE Payments
(
	[PaymentID] INT PRIMARY KEY,
	[PaymentDate] DATETIME,
	[PaymentAmount] FLOAT,
	[StudentID] INT,
	CONSTRAINT FK_Payments_Students FOREIGN KEY(StudentID)
	REFERENCES Students(StudentID)
)

CREATE TABLE Agenda
(
	[StudentID] INT,
	[SubjectID] INT,
	CONSTRAINT PK_Agenda PRIMARY KEY (StudentID, SubjectID),
	CONSTRAINT FK_Agenda_Students FOREIGN KEY(StudentID)
	REFERENCES Students(StudentID),
	CONSTRAINT FK_Agenda_Subjects FOREIGN KEY(SubjectID)
	REFERENCES Subjects(SubjectID)
)
--------------------------------------------------------------------
09. Employee Address
--------------------------------------------------------------------
SELECT TOP 5 e.EmployeeID, e.JobTitle, a.AddressID, a.AddressText
FROM Employees AS e
	INNER JOIN Addresses AS a
	ON e.AddressID = a.AddressId
	ORDER BY a.AddressId 
--------------------------------------------------------------------
10. Employee Departments
--------------------------------------------------------------------
SELECT TOP 5 e.EmployeeID, e.FirstName, e.Salary, d.Name
FROM Employees AS e
	INNER JOIN Departments AS d
	ON e.DepartmentID = d.DepartmentID
	WHERE e.Salary > 15000
	ORDER BY d.DepartmentID
--------------------------------------------------------------------
11. Employees Without Project
--------------------------------------------------------------------
SELECT TOP 3 e.EmployeeID, e.FirstName
FROM Employees AS e
	LEFT JOIN EmployeesProjects AS ep
	ON e.EmployeeID = ep.EmployeeID
	WHERE ep.ProjectID IS NULL
	ORDER BY e.EmployeeID
--------------------------------------------------------------------
12. Employees With Project
--------------------------------------------------------------------
SELECT TOP 5 
	e.EmployeeID, e.FirstName, p.Name
FROM 
	Employees AS e
INNER JOIN 
	EmployeesProjects AS ep
ON 
        e.EmployeeID = ep.EmployeeID
INNER JOIN 
	Projects AS p
ON 
	ep.ProjectID = p.ProjectID
WHERE 
	p.StartDate > '2002-08-13'
ORDER BY 
	e.EmployeeID
--------------------------------------------------------------------
13. Employee 24
--------------------------------------------------------------------
SELECT  
	e.EmployeeID, e.FirstName,
		CASE 
			WHEN p.StartDate > '2004-12-31' THEN NULL
			ELSE p.Name
		END AS ProjectName
FROM Employees AS e
	LEFT OUTER JOIN EmployeesProjects AS ep
ON e.EmployeeID = ep.EmployeeID
	LEFT OUTER JOIN Projects AS p
ON ep.ProjectID = p.ProjectID
WHERE e.EmployeeID = 24
ORDER BY e.EmployeeID
--------------------------------------------------------------------
14. Employee Manager
--------------------------------------------------------------------
SELECT e.EmployeeID, e.FirstName, e1.EmployeeID, e1.FirstName AS ManagerName
FROM Employees AS e
	INNER JOIN Employees AS e1
	ON e.ManagerID = e1.EmployeeID
	WHERE e.ManagerID IN (3, 7)
	ORDER BY e.EmployeeID
--------------------------------------------------------------------
15. Highest Peak in Bulgaria
--------------------------------------------------------------------
SELECT mc.CountryCode, m.MountainRange, p.PeakName, p.Elevation
FROM Mountains AS m
 INNER JOIN MountainsCountries AS mc
 ON m.Id = mc.MountainId
 INNER JOIN Peaks AS p
 ON m.Id = p.MountainId
 WHERE mc.CountryCode = 'BG'
 AND p.Elevation > 2835
 ORDER BY p.Elevation DESC
--------------------------------------------------------------------
16. Count Mountain Ranges
--------------------------------------------------------------------
SELECT mc.CountryCode, COUNT(m.MountainRange) AS MountainRanges
FROM Mountains AS m
 INNER JOIN MountainsCountries AS mc
 ON m.Id = mc.MountainId
 WHERE mc.CountryCode IN ('BG', 'RU', 'US')
 GROUP BY mc.CountryCode
--------------------------------------------------------------------
17. Countries With Rivers
--------------------------------------------------------------------
SELECT TOP 5 
	c1.CountryName, r.RiverName FROM Continents as c
INNER JOIN 
	Countries as c1
ON 
	c.ContinentCode = c1.ContinentCode
LEFT JOIN 
	CountriesRivers cr
ON 	c1.CountryCode = cr.CountryCode
LEFT JOIN 
	Rivers r 
ON 
	r.Id = cr.RiverId
WHERE c.ContinentCode = 'AF'
ORDER BY c1.CountryName
--------------------------------------------------------------------
18. Continents and Currencies
--------------------------------------------------------------------
SELECT c.ContinentCode, co.CurrencyCode, c.CurrencyUsage FROM
(SELECT cu.ContinentCode, MAX(cu.CurrencyUsage) AS CurrencyUsage FROM
(SELECT c.ContinentCode, c.CurrencyCode, COUNT(c.CurrencyCode) AS CurrencyUsage
 FROM Countries AS c
 GROUP BY c.ContinentCode , c.CurrencyCode) AS cu
 GROUP BY cu.ContinentCode
 HAVING MAX(cu.CurrencyUsage) > 1) AS c
	INNER JOIN (SELECT c.ContinentCode, c.CurrencyCode, COUNT(c.CurrencyCode) AS CurrencyUsage
		FROM Countries AS c
		GROUP BY c.ContinentCode, c.CurrencyCode) AS co
	ON co.ContinentCode = c.ContinentCode AND co.CurrencyUsage = c.CurrencyUsage
 ORDER BY c.ContinentCode
--------------------------------------------------------------------
19. Countries without any Mountains
--------------------------------------------------------------------
DECLARE @countOfCountriesWithMountains INT = (SELECT COUNT (*) FROM
(SELECT c.CountryCode
FROM MountainsCountries AS mc
	INNER JOIN Countries AS c
	ON c.CountryCode = mc.CountryCode
	GROUP BY c.CountryCode) AS TotalRecords)

DECLARE @countOfCountriesTotal INT = (SELECT COUNT(*)
FROM Countries AS c)

DECLARE @countOfCountriesWithoutMountains INT = @countOfCountriesTotal - @countOfCountriesWithMountains
SELECT @countOfCountriesWithoutMountains AS CountryCode
--------------------------------------------------------------------
20. Higest Peak and Longest River by Country
--------------------------------------------------------------------
SELECT TOP 5 
			cpr.CountryName, 
			MAX(cpr.Elevation) AS HighestPeakElevation ,
			MAX(cpr.Length) AS LongestRiverLength 
FROM
(SELECT 
	c.CountryName,p.Elevation, p.PeakName  , r.Length, r.RiverName
FROM Countries AS c
	LEFT JOIN CountriesRivers AS cr
ON c.CountryCode = cr.CountryCode
	LEFT JOIN MountainsCountries AS mc
ON c.CountryCode = mc.CountryCode
	LEFT JOIN Rivers AS r
ON cr.RiverId = r.Id
	LEFT JOIN Peaks AS p
ON mc.MountainId = p.MountainId) AS cpr
    GROUP BY cpr.CountryName
	ORDER BY HighestPeakElevation DESC, 
			 LongestRiverLength DESC, 
			 cpr.CountryName
--------------------------------------------------------------------
21. Highest Peak Name and Elevation by Country
--------------------------------------------------------------------
SELECT TOP 5 mcpr.CountryName,
	   ISNULL(p.PeakName, '(no highest peak)') AS HighestPeakName,
	   ISNULL(mcpr.HighestPeakElevation, 0),
	   ISNULL(m.MountainRange, '(no mountain)') AS Mountain
FROM
(SELECT 
		cpr.CountryName, 
		MAX(cpr.Elevation) AS HighestPeakElevation
FROM
(SELECT 
	c.CountryName,p.Elevation, p.PeakName  , r.Length, r.RiverName
FROM Countries AS c
	LEFT JOIN CountriesRivers AS cr
ON c.CountryCode = cr.CountryCode
	LEFT JOIN MountainsCountries AS mc
ON c.CountryCode = mc.CountryCode
	LEFT JOIN Rivers AS r
ON cr.RiverId = r.Id
	LEFT JOIN Peaks AS p
ON mc.MountainId = p.MountainId) AS cpr
    GROUP BY cpr.CountryName) AS mcpr
	LEFT JOIN Peaks AS p
	ON p.Elevation = mcpr.HighestPeakElevation
	LEFT JOIN Mountains AS m
	ON m.Id = p.MountainId
	ORDER BY mcpr.CountryName, HighestPeakName